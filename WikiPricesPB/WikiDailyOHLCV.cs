// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WikiDailyOHLCV.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D1100.Data {

  /// <summary>Holder for reflection information generated from WikiDailyOHLCV.proto</summary>
  public static partial class WikiDailyOHLCVReflection {

    #region Descriptor
    /// <summary>File descriptor for WikiDailyOHLCV.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WikiDailyOHLCVReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRXaWtpRGFpbHlPSExDVi5wcm90bxIKZDExMDAuZGF0YSLzAQoOV2lraURh",
            "aWx5T0hMQ1YSDgoGdGlja2VyGAEgASgJEgoKAnRzGAIgASgDEgwKBG9wZW4Y",
            "AyABKAESDAoEaGlnaBgEIAEoARILCgNsb3cYBSABKAESDQoFY2xvc2UYBiAB",
            "KAESDgoGdm9sdW1lGAcgASgBEhIKCmV4RGl2aWRlbmQYCCABKAESEgoKc3Bs",
            "aXRSYXRpbxgJIAEoARIPCgdhZGpPcGVuGAogASgBEg8KB2FkakhpZ2gYCyAB",
            "KAESDgoGYWRqTG93GAwgASgBEhAKCGFkakNsb3NlGA0gASgBEhEKCWFkalZv",
            "bHVtZRgOIAEoASKGAgoRV2lraURhaWx5Q29sT0hMQ1YSDQoFZGF5dHMYASAB",
            "KAYSDwoHdGlja2VycxgCIAMoCRINCgVvcGVucxgDIAMoARINCgVoaWdocxgE",
            "IAMoARIMCgRsb3dzGAUgAygBEg4KBmNsb3NlcxgGIAMoARIPCgd2b2x1bWVz",
            "GAcgAygBEhMKC2V4RGl2aWRlbmRzGAggAygBEhMKC3NwbGl0UmF0aW9zGAkg",
            "AygBEhAKCGFkak9wZW5zGAogAygBEhAKCGFkakhpZ2hzGAsgAygBEg8KB2Fk",
            "akxvd3MYDCADKAESEQoJYWRqQ2xvc2VzGA0gAygBEhIKCmFkalZvbHVtZXMY",
            "DiADKAEiiwIKFldpa2lEYWlseUNvbEJ5dGVzT0hMQ1YSDQoFZGF5dHMYASAB",
            "KAYSDwoHdGlja2VycxgCIAMoCRINCgVvcGVucxgDIAEoDBINCgVoaWdocxgE",
            "IAEoDBIMCgRsb3dzGAUgASgMEg4KBmNsb3NlcxgGIAEoDBIPCgd2b2x1bWVz",
            "GAcgASgMEhMKC2V4RGl2aWRlbmRzGAggASgMEhMKC3NwbGl0UmF0aW9zGAkg",
            "ASgMEhAKCGFkak9wZW5zGAogASgMEhAKCGFkakhpZ2hzGAsgASgMEg8KB2Fk",
            "akxvd3MYDCABKAwSEQoJYWRqQ2xvc2VzGA0gASgMEhIKCmFkalZvbHVtZXMY",
            "DiABKAxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D1100.Data.WikiDailyOHLCV), global::D1100.Data.WikiDailyOHLCV.Parser, new[]{ "Ticker", "Ts", "Open", "High", "Low", "Close", "Volume", "ExDividend", "SplitRatio", "AdjOpen", "AdjHigh", "AdjLow", "AdjClose", "AdjVolume" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D1100.Data.WikiDailyColOHLCV), global::D1100.Data.WikiDailyColOHLCV.Parser, new[]{ "Dayts", "Tickers", "Opens", "Highs", "Lows", "Closes", "Volumes", "ExDividends", "SplitRatios", "AdjOpens", "AdjHighs", "AdjLows", "AdjCloses", "AdjVolumes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D1100.Data.WikiDailyColBytesOHLCV), global::D1100.Data.WikiDailyColBytesOHLCV.Parser, new[]{ "Dayts", "Tickers", "Opens", "Highs", "Lows", "Closes", "Volumes", "ExDividends", "SplitRatios", "AdjOpens", "AdjHighs", "AdjLows", "AdjCloses", "AdjVolumes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents a single observation of EOD dailyOHLCV
  /// with both adjusted and unadjusted values
  /// in particular that found at
  /// https://www.quandl.com/databases/WIKIP
  /// 
  /// data comes like this from the CSV
  /// 0 ticker A
  /// 1 date 1999-11-18
  /// 2 open 45.5
  /// 3 high 50.0
  /// 4 low 40.0
  /// 5 close 44.0
  /// 6 volume 44739900.0
  /// 7 ex-dividend 0.0
  /// 8 split_ratio 1.0
  /// 9 adj_open 31.041951216877
  /// 10 adj_high 34.112034304261
  /// 11 adj_low 27.289627443409
  /// 12 adj_close 30.018590187749
  /// 13 adj_volume 44739900.0
  ///
  /// which I leave intact except for converting the date to unix timestamp
  /// </summary>
  public sealed partial class WikiDailyOHLCV : pb::IMessage<WikiDailyOHLCV> {
    private static readonly pb::MessageParser<WikiDailyOHLCV> _parser = new pb::MessageParser<WikiDailyOHLCV>(() => new WikiDailyOHLCV());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WikiDailyOHLCV> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D1100.Data.WikiDailyOHLCVReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyOHLCV() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyOHLCV(WikiDailyOHLCV other) : this() {
      ticker_ = other.ticker_;
      ts_ = other.ts_;
      open_ = other.open_;
      high_ = other.high_;
      low_ = other.low_;
      close_ = other.close_;
      volume_ = other.volume_;
      exDividend_ = other.exDividend_;
      splitRatio_ = other.splitRatio_;
      adjOpen_ = other.adjOpen_;
      adjHigh_ = other.adjHigh_;
      adjLow_ = other.adjLow_;
      adjClose_ = other.adjClose_;
      adjVolume_ = other.adjVolume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyOHLCV Clone() {
      return new WikiDailyOHLCV(this);
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 1;
    private string ticker_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ts" field.</summary>
    public const int TsFieldNumber = 2;
    private long ts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Ts {
      get { return ts_; }
      set {
        ts_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 3;
    private double open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 4;
    private double high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 5;
    private double low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 6;
    private double close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 7;
    private double volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "exDividend" field.</summary>
    public const int ExDividendFieldNumber = 8;
    private double exDividend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExDividend {
      get { return exDividend_; }
      set {
        exDividend_ = value;
      }
    }

    /// <summary>Field number for the "splitRatio" field.</summary>
    public const int SplitRatioFieldNumber = 9;
    private double splitRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SplitRatio {
      get { return splitRatio_; }
      set {
        splitRatio_ = value;
      }
    }

    /// <summary>Field number for the "adjOpen" field.</summary>
    public const int AdjOpenFieldNumber = 10;
    private double adjOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjOpen {
      get { return adjOpen_; }
      set {
        adjOpen_ = value;
      }
    }

    /// <summary>Field number for the "adjHigh" field.</summary>
    public const int AdjHighFieldNumber = 11;
    private double adjHigh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjHigh {
      get { return adjHigh_; }
      set {
        adjHigh_ = value;
      }
    }

    /// <summary>Field number for the "adjLow" field.</summary>
    public const int AdjLowFieldNumber = 12;
    private double adjLow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjLow {
      get { return adjLow_; }
      set {
        adjLow_ = value;
      }
    }

    /// <summary>Field number for the "adjClose" field.</summary>
    public const int AdjCloseFieldNumber = 13;
    private double adjClose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjClose {
      get { return adjClose_; }
      set {
        adjClose_ = value;
      }
    }

    /// <summary>Field number for the "adjVolume" field.</summary>
    public const int AdjVolumeFieldNumber = 14;
    private double adjVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AdjVolume {
      get { return adjVolume_; }
      set {
        adjVolume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WikiDailyOHLCV);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WikiDailyOHLCV other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ticker != other.Ticker) return false;
      if (Ts != other.Ts) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Open, other.Open)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(High, other.High)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Low, other.Low)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Close, other.Close)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExDividend, other.ExDividend)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SplitRatio, other.SplitRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjOpen, other.AdjOpen)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjHigh, other.AdjHigh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjLow, other.AdjLow)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjClose, other.AdjClose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AdjVolume, other.AdjVolume)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (Ts != 0L) hash ^= Ts.GetHashCode();
      if (Open != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Open);
      if (High != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(High);
      if (Low != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Low);
      if (Close != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Close);
      if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
      if (ExDividend != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExDividend);
      if (SplitRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SplitRatio);
      if (AdjOpen != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjOpen);
      if (AdjHigh != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjHigh);
      if (AdjLow != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjLow);
      if (AdjClose != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjClose);
      if (AdjVolume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AdjVolume);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ticker.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticker);
      }
      if (Ts != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Ts);
      }
      if (Open != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Open);
      }
      if (High != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(High);
      }
      if (Low != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Low);
      }
      if (Close != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Close);
      }
      if (Volume != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Volume);
      }
      if (ExDividend != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ExDividend);
      }
      if (SplitRatio != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(SplitRatio);
      }
      if (AdjOpen != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(AdjOpen);
      }
      if (AdjHigh != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AdjHigh);
      }
      if (AdjLow != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(AdjLow);
      }
      if (AdjClose != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(AdjClose);
      }
      if (AdjVolume != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(AdjVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (Ts != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ts);
      }
      if (Open != 0D) {
        size += 1 + 8;
      }
      if (High != 0D) {
        size += 1 + 8;
      }
      if (Low != 0D) {
        size += 1 + 8;
      }
      if (Close != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0D) {
        size += 1 + 8;
      }
      if (ExDividend != 0D) {
        size += 1 + 8;
      }
      if (SplitRatio != 0D) {
        size += 1 + 8;
      }
      if (AdjOpen != 0D) {
        size += 1 + 8;
      }
      if (AdjHigh != 0D) {
        size += 1 + 8;
      }
      if (AdjLow != 0D) {
        size += 1 + 8;
      }
      if (AdjClose != 0D) {
        size += 1 + 8;
      }
      if (AdjVolume != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WikiDailyOHLCV other) {
      if (other == null) {
        return;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.Ts != 0L) {
        Ts = other.Ts;
      }
      if (other.Open != 0D) {
        Open = other.Open;
      }
      if (other.High != 0D) {
        High = other.High;
      }
      if (other.Low != 0D) {
        Low = other.Low;
      }
      if (other.Close != 0D) {
        Close = other.Close;
      }
      if (other.Volume != 0D) {
        Volume = other.Volume;
      }
      if (other.ExDividend != 0D) {
        ExDividend = other.ExDividend;
      }
      if (other.SplitRatio != 0D) {
        SplitRatio = other.SplitRatio;
      }
      if (other.AdjOpen != 0D) {
        AdjOpen = other.AdjOpen;
      }
      if (other.AdjHigh != 0D) {
        AdjHigh = other.AdjHigh;
      }
      if (other.AdjLow != 0D) {
        AdjLow = other.AdjLow;
      }
      if (other.AdjClose != 0D) {
        AdjClose = other.AdjClose;
      }
      if (other.AdjVolume != 0D) {
        AdjVolume = other.AdjVolume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ticker = input.ReadString();
            break;
          }
          case 16: {
            Ts = input.ReadInt64();
            break;
          }
          case 25: {
            Open = input.ReadDouble();
            break;
          }
          case 33: {
            High = input.ReadDouble();
            break;
          }
          case 41: {
            Low = input.ReadDouble();
            break;
          }
          case 49: {
            Close = input.ReadDouble();
            break;
          }
          case 57: {
            Volume = input.ReadDouble();
            break;
          }
          case 65: {
            ExDividend = input.ReadDouble();
            break;
          }
          case 73: {
            SplitRatio = input.ReadDouble();
            break;
          }
          case 81: {
            AdjOpen = input.ReadDouble();
            break;
          }
          case 89: {
            AdjHigh = input.ReadDouble();
            break;
          }
          case 97: {
            AdjLow = input.ReadDouble();
            break;
          }
          case 105: {
            AdjClose = input.ReadDouble();
            break;
          }
          case 113: {
            AdjVolume = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// column oriented using PB repeated fields
  /// which will be packed in proto3
  /// </summary>
  public sealed partial class WikiDailyColOHLCV : pb::IMessage<WikiDailyColOHLCV> {
    private static readonly pb::MessageParser<WikiDailyColOHLCV> _parser = new pb::MessageParser<WikiDailyColOHLCV>(() => new WikiDailyColOHLCV());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WikiDailyColOHLCV> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D1100.Data.WikiDailyOHLCVReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyColOHLCV() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyColOHLCV(WikiDailyColOHLCV other) : this() {
      dayts_ = other.dayts_;
      tickers_ = other.tickers_.Clone();
      opens_ = other.opens_.Clone();
      highs_ = other.highs_.Clone();
      lows_ = other.lows_.Clone();
      closes_ = other.closes_.Clone();
      volumes_ = other.volumes_.Clone();
      exDividends_ = other.exDividends_.Clone();
      splitRatios_ = other.splitRatios_.Clone();
      adjOpens_ = other.adjOpens_.Clone();
      adjHighs_ = other.adjHighs_.Clone();
      adjLows_ = other.adjLows_.Clone();
      adjCloses_ = other.adjCloses_.Clone();
      adjVolumes_ = other.adjVolumes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyColOHLCV Clone() {
      return new WikiDailyColOHLCV(this);
    }

    /// <summary>Field number for the "dayts" field.</summary>
    public const int DaytsFieldNumber = 1;
    private ulong dayts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Dayts {
      get { return dayts_; }
      set {
        dayts_ = value;
      }
    }

    /// <summary>Field number for the "tickers" field.</summary>
    public const int TickersFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_tickers_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> tickers_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tickers {
      get { return tickers_; }
    }

    /// <summary>Field number for the "opens" field.</summary>
    public const int OpensFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_opens_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> opens_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Opens {
      get { return opens_; }
    }

    /// <summary>Field number for the "highs" field.</summary>
    public const int HighsFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_highs_codec
        = pb::FieldCodec.ForDouble(34);
    private readonly pbc::RepeatedField<double> highs_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Highs {
      get { return highs_; }
    }

    /// <summary>Field number for the "lows" field.</summary>
    public const int LowsFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_lows_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> lows_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Lows {
      get { return lows_; }
    }

    /// <summary>Field number for the "closes" field.</summary>
    public const int ClosesFieldNumber = 6;
    private static readonly pb::FieldCodec<double> _repeated_closes_codec
        = pb::FieldCodec.ForDouble(50);
    private readonly pbc::RepeatedField<double> closes_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Closes {
      get { return closes_; }
    }

    /// <summary>Field number for the "volumes" field.</summary>
    public const int VolumesFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_volumes_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> volumes_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Volumes {
      get { return volumes_; }
    }

    /// <summary>Field number for the "exDividends" field.</summary>
    public const int ExDividendsFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_exDividends_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> exDividends_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ExDividends {
      get { return exDividends_; }
    }

    /// <summary>Field number for the "splitRatios" field.</summary>
    public const int SplitRatiosFieldNumber = 9;
    private static readonly pb::FieldCodec<double> _repeated_splitRatios_codec
        = pb::FieldCodec.ForDouble(74);
    private readonly pbc::RepeatedField<double> splitRatios_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> SplitRatios {
      get { return splitRatios_; }
    }

    /// <summary>Field number for the "adjOpens" field.</summary>
    public const int AdjOpensFieldNumber = 10;
    private static readonly pb::FieldCodec<double> _repeated_adjOpens_codec
        = pb::FieldCodec.ForDouble(82);
    private readonly pbc::RepeatedField<double> adjOpens_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AdjOpens {
      get { return adjOpens_; }
    }

    /// <summary>Field number for the "adjHighs" field.</summary>
    public const int AdjHighsFieldNumber = 11;
    private static readonly pb::FieldCodec<double> _repeated_adjHighs_codec
        = pb::FieldCodec.ForDouble(90);
    private readonly pbc::RepeatedField<double> adjHighs_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AdjHighs {
      get { return adjHighs_; }
    }

    /// <summary>Field number for the "adjLows" field.</summary>
    public const int AdjLowsFieldNumber = 12;
    private static readonly pb::FieldCodec<double> _repeated_adjLows_codec
        = pb::FieldCodec.ForDouble(98);
    private readonly pbc::RepeatedField<double> adjLows_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AdjLows {
      get { return adjLows_; }
    }

    /// <summary>Field number for the "adjCloses" field.</summary>
    public const int AdjClosesFieldNumber = 13;
    private static readonly pb::FieldCodec<double> _repeated_adjCloses_codec
        = pb::FieldCodec.ForDouble(106);
    private readonly pbc::RepeatedField<double> adjCloses_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AdjCloses {
      get { return adjCloses_; }
    }

    /// <summary>Field number for the "adjVolumes" field.</summary>
    public const int AdjVolumesFieldNumber = 14;
    private static readonly pb::FieldCodec<double> _repeated_adjVolumes_codec
        = pb::FieldCodec.ForDouble(114);
    private readonly pbc::RepeatedField<double> adjVolumes_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> AdjVolumes {
      get { return adjVolumes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WikiDailyColOHLCV);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WikiDailyColOHLCV other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dayts != other.Dayts) return false;
      if(!tickers_.Equals(other.tickers_)) return false;
      if(!opens_.Equals(other.opens_)) return false;
      if(!highs_.Equals(other.highs_)) return false;
      if(!lows_.Equals(other.lows_)) return false;
      if(!closes_.Equals(other.closes_)) return false;
      if(!volumes_.Equals(other.volumes_)) return false;
      if(!exDividends_.Equals(other.exDividends_)) return false;
      if(!splitRatios_.Equals(other.splitRatios_)) return false;
      if(!adjOpens_.Equals(other.adjOpens_)) return false;
      if(!adjHighs_.Equals(other.adjHighs_)) return false;
      if(!adjLows_.Equals(other.adjLows_)) return false;
      if(!adjCloses_.Equals(other.adjCloses_)) return false;
      if(!adjVolumes_.Equals(other.adjVolumes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dayts != 0UL) hash ^= Dayts.GetHashCode();
      hash ^= tickers_.GetHashCode();
      hash ^= opens_.GetHashCode();
      hash ^= highs_.GetHashCode();
      hash ^= lows_.GetHashCode();
      hash ^= closes_.GetHashCode();
      hash ^= volumes_.GetHashCode();
      hash ^= exDividends_.GetHashCode();
      hash ^= splitRatios_.GetHashCode();
      hash ^= adjOpens_.GetHashCode();
      hash ^= adjHighs_.GetHashCode();
      hash ^= adjLows_.GetHashCode();
      hash ^= adjCloses_.GetHashCode();
      hash ^= adjVolumes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dayts != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Dayts);
      }
      tickers_.WriteTo(output, _repeated_tickers_codec);
      opens_.WriteTo(output, _repeated_opens_codec);
      highs_.WriteTo(output, _repeated_highs_codec);
      lows_.WriteTo(output, _repeated_lows_codec);
      closes_.WriteTo(output, _repeated_closes_codec);
      volumes_.WriteTo(output, _repeated_volumes_codec);
      exDividends_.WriteTo(output, _repeated_exDividends_codec);
      splitRatios_.WriteTo(output, _repeated_splitRatios_codec);
      adjOpens_.WriteTo(output, _repeated_adjOpens_codec);
      adjHighs_.WriteTo(output, _repeated_adjHighs_codec);
      adjLows_.WriteTo(output, _repeated_adjLows_codec);
      adjCloses_.WriteTo(output, _repeated_adjCloses_codec);
      adjVolumes_.WriteTo(output, _repeated_adjVolumes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dayts != 0UL) {
        size += 1 + 8;
      }
      size += tickers_.CalculateSize(_repeated_tickers_codec);
      size += opens_.CalculateSize(_repeated_opens_codec);
      size += highs_.CalculateSize(_repeated_highs_codec);
      size += lows_.CalculateSize(_repeated_lows_codec);
      size += closes_.CalculateSize(_repeated_closes_codec);
      size += volumes_.CalculateSize(_repeated_volumes_codec);
      size += exDividends_.CalculateSize(_repeated_exDividends_codec);
      size += splitRatios_.CalculateSize(_repeated_splitRatios_codec);
      size += adjOpens_.CalculateSize(_repeated_adjOpens_codec);
      size += adjHighs_.CalculateSize(_repeated_adjHighs_codec);
      size += adjLows_.CalculateSize(_repeated_adjLows_codec);
      size += adjCloses_.CalculateSize(_repeated_adjCloses_codec);
      size += adjVolumes_.CalculateSize(_repeated_adjVolumes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WikiDailyColOHLCV other) {
      if (other == null) {
        return;
      }
      if (other.Dayts != 0UL) {
        Dayts = other.Dayts;
      }
      tickers_.Add(other.tickers_);
      opens_.Add(other.opens_);
      highs_.Add(other.highs_);
      lows_.Add(other.lows_);
      closes_.Add(other.closes_);
      volumes_.Add(other.volumes_);
      exDividends_.Add(other.exDividends_);
      splitRatios_.Add(other.splitRatios_);
      adjOpens_.Add(other.adjOpens_);
      adjHighs_.Add(other.adjHighs_);
      adjLows_.Add(other.adjLows_);
      adjCloses_.Add(other.adjCloses_);
      adjVolumes_.Add(other.adjVolumes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Dayts = input.ReadFixed64();
            break;
          }
          case 18: {
            tickers_.AddEntriesFrom(input, _repeated_tickers_codec);
            break;
          }
          case 26:
          case 25: {
            opens_.AddEntriesFrom(input, _repeated_opens_codec);
            break;
          }
          case 34:
          case 33: {
            highs_.AddEntriesFrom(input, _repeated_highs_codec);
            break;
          }
          case 42:
          case 41: {
            lows_.AddEntriesFrom(input, _repeated_lows_codec);
            break;
          }
          case 50:
          case 49: {
            closes_.AddEntriesFrom(input, _repeated_closes_codec);
            break;
          }
          case 58:
          case 57: {
            volumes_.AddEntriesFrom(input, _repeated_volumes_codec);
            break;
          }
          case 66:
          case 65: {
            exDividends_.AddEntriesFrom(input, _repeated_exDividends_codec);
            break;
          }
          case 74:
          case 73: {
            splitRatios_.AddEntriesFrom(input, _repeated_splitRatios_codec);
            break;
          }
          case 82:
          case 81: {
            adjOpens_.AddEntriesFrom(input, _repeated_adjOpens_codec);
            break;
          }
          case 90:
          case 89: {
            adjHighs_.AddEntriesFrom(input, _repeated_adjHighs_codec);
            break;
          }
          case 98:
          case 97: {
            adjLows_.AddEntriesFrom(input, _repeated_adjLows_codec);
            break;
          }
          case 106:
          case 105: {
            adjCloses_.AddEntriesFrom(input, _repeated_adjCloses_codec);
            break;
          }
          case 114:
          case 113: {
            adjVolumes_.AddEntriesFrom(input, _repeated_adjVolumes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An alternative using the little indian raw doubles
  /// except for strings. I should know the size based on 
  /// number of tickers so should be able to reconstruct the
  /// underlying array pretty efficiently
  /// </summary>
  public sealed partial class WikiDailyColBytesOHLCV : pb::IMessage<WikiDailyColBytesOHLCV> {
    private static readonly pb::MessageParser<WikiDailyColBytesOHLCV> _parser = new pb::MessageParser<WikiDailyColBytesOHLCV>(() => new WikiDailyColBytesOHLCV());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WikiDailyColBytesOHLCV> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D1100.Data.WikiDailyOHLCVReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyColBytesOHLCV() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyColBytesOHLCV(WikiDailyColBytesOHLCV other) : this() {
      dayts_ = other.dayts_;
      tickers_ = other.tickers_.Clone();
      opens_ = other.opens_;
      highs_ = other.highs_;
      lows_ = other.lows_;
      closes_ = other.closes_;
      volumes_ = other.volumes_;
      exDividends_ = other.exDividends_;
      splitRatios_ = other.splitRatios_;
      adjOpens_ = other.adjOpens_;
      adjHighs_ = other.adjHighs_;
      adjLows_ = other.adjLows_;
      adjCloses_ = other.adjCloses_;
      adjVolumes_ = other.adjVolumes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WikiDailyColBytesOHLCV Clone() {
      return new WikiDailyColBytesOHLCV(this);
    }

    /// <summary>Field number for the "dayts" field.</summary>
    public const int DaytsFieldNumber = 1;
    private ulong dayts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Dayts {
      get { return dayts_; }
      set {
        dayts_ = value;
      }
    }

    /// <summary>Field number for the "tickers" field.</summary>
    public const int TickersFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_tickers_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> tickers_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tickers {
      get { return tickers_; }
    }

    /// <summary>Field number for the "opens" field.</summary>
    public const int OpensFieldNumber = 3;
    private pb::ByteString opens_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Opens {
      get { return opens_; }
      set {
        opens_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highs" field.</summary>
    public const int HighsFieldNumber = 4;
    private pb::ByteString highs_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Highs {
      get { return highs_; }
      set {
        highs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lows" field.</summary>
    public const int LowsFieldNumber = 5;
    private pb::ByteString lows_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Lows {
      get { return lows_; }
      set {
        lows_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "closes" field.</summary>
    public const int ClosesFieldNumber = 6;
    private pb::ByteString closes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Closes {
      get { return closes_; }
      set {
        closes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "volumes" field.</summary>
    public const int VolumesFieldNumber = 7;
    private pb::ByteString volumes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Volumes {
      get { return volumes_; }
      set {
        volumes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exDividends" field.</summary>
    public const int ExDividendsFieldNumber = 8;
    private pb::ByteString exDividends_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExDividends {
      get { return exDividends_; }
      set {
        exDividends_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "splitRatios" field.</summary>
    public const int SplitRatiosFieldNumber = 9;
    private pb::ByteString splitRatios_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SplitRatios {
      get { return splitRatios_; }
      set {
        splitRatios_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adjOpens" field.</summary>
    public const int AdjOpensFieldNumber = 10;
    private pb::ByteString adjOpens_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AdjOpens {
      get { return adjOpens_; }
      set {
        adjOpens_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adjHighs" field.</summary>
    public const int AdjHighsFieldNumber = 11;
    private pb::ByteString adjHighs_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AdjHighs {
      get { return adjHighs_; }
      set {
        adjHighs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adjLows" field.</summary>
    public const int AdjLowsFieldNumber = 12;
    private pb::ByteString adjLows_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AdjLows {
      get { return adjLows_; }
      set {
        adjLows_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adjCloses" field.</summary>
    public const int AdjClosesFieldNumber = 13;
    private pb::ByteString adjCloses_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AdjCloses {
      get { return adjCloses_; }
      set {
        adjCloses_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adjVolumes" field.</summary>
    public const int AdjVolumesFieldNumber = 14;
    private pb::ByteString adjVolumes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AdjVolumes {
      get { return adjVolumes_; }
      set {
        adjVolumes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WikiDailyColBytesOHLCV);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WikiDailyColBytesOHLCV other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dayts != other.Dayts) return false;
      if(!tickers_.Equals(other.tickers_)) return false;
      if (Opens != other.Opens) return false;
      if (Highs != other.Highs) return false;
      if (Lows != other.Lows) return false;
      if (Closes != other.Closes) return false;
      if (Volumes != other.Volumes) return false;
      if (ExDividends != other.ExDividends) return false;
      if (SplitRatios != other.SplitRatios) return false;
      if (AdjOpens != other.AdjOpens) return false;
      if (AdjHighs != other.AdjHighs) return false;
      if (AdjLows != other.AdjLows) return false;
      if (AdjCloses != other.AdjCloses) return false;
      if (AdjVolumes != other.AdjVolumes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dayts != 0UL) hash ^= Dayts.GetHashCode();
      hash ^= tickers_.GetHashCode();
      if (Opens.Length != 0) hash ^= Opens.GetHashCode();
      if (Highs.Length != 0) hash ^= Highs.GetHashCode();
      if (Lows.Length != 0) hash ^= Lows.GetHashCode();
      if (Closes.Length != 0) hash ^= Closes.GetHashCode();
      if (Volumes.Length != 0) hash ^= Volumes.GetHashCode();
      if (ExDividends.Length != 0) hash ^= ExDividends.GetHashCode();
      if (SplitRatios.Length != 0) hash ^= SplitRatios.GetHashCode();
      if (AdjOpens.Length != 0) hash ^= AdjOpens.GetHashCode();
      if (AdjHighs.Length != 0) hash ^= AdjHighs.GetHashCode();
      if (AdjLows.Length != 0) hash ^= AdjLows.GetHashCode();
      if (AdjCloses.Length != 0) hash ^= AdjCloses.GetHashCode();
      if (AdjVolumes.Length != 0) hash ^= AdjVolumes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dayts != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Dayts);
      }
      tickers_.WriteTo(output, _repeated_tickers_codec);
      if (Opens.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Opens);
      }
      if (Highs.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Highs);
      }
      if (Lows.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Lows);
      }
      if (Closes.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Closes);
      }
      if (Volumes.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Volumes);
      }
      if (ExDividends.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(ExDividends);
      }
      if (SplitRatios.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(SplitRatios);
      }
      if (AdjOpens.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(AdjOpens);
      }
      if (AdjHighs.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(AdjHighs);
      }
      if (AdjLows.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(AdjLows);
      }
      if (AdjCloses.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(AdjCloses);
      }
      if (AdjVolumes.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(AdjVolumes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dayts != 0UL) {
        size += 1 + 8;
      }
      size += tickers_.CalculateSize(_repeated_tickers_codec);
      if (Opens.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Opens);
      }
      if (Highs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Highs);
      }
      if (Lows.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Lows);
      }
      if (Closes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Closes);
      }
      if (Volumes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Volumes);
      }
      if (ExDividends.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExDividends);
      }
      if (SplitRatios.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SplitRatios);
      }
      if (AdjOpens.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AdjOpens);
      }
      if (AdjHighs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AdjHighs);
      }
      if (AdjLows.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AdjLows);
      }
      if (AdjCloses.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AdjCloses);
      }
      if (AdjVolumes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AdjVolumes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WikiDailyColBytesOHLCV other) {
      if (other == null) {
        return;
      }
      if (other.Dayts != 0UL) {
        Dayts = other.Dayts;
      }
      tickers_.Add(other.tickers_);
      if (other.Opens.Length != 0) {
        Opens = other.Opens;
      }
      if (other.Highs.Length != 0) {
        Highs = other.Highs;
      }
      if (other.Lows.Length != 0) {
        Lows = other.Lows;
      }
      if (other.Closes.Length != 0) {
        Closes = other.Closes;
      }
      if (other.Volumes.Length != 0) {
        Volumes = other.Volumes;
      }
      if (other.ExDividends.Length != 0) {
        ExDividends = other.ExDividends;
      }
      if (other.SplitRatios.Length != 0) {
        SplitRatios = other.SplitRatios;
      }
      if (other.AdjOpens.Length != 0) {
        AdjOpens = other.AdjOpens;
      }
      if (other.AdjHighs.Length != 0) {
        AdjHighs = other.AdjHighs;
      }
      if (other.AdjLows.Length != 0) {
        AdjLows = other.AdjLows;
      }
      if (other.AdjCloses.Length != 0) {
        AdjCloses = other.AdjCloses;
      }
      if (other.AdjVolumes.Length != 0) {
        AdjVolumes = other.AdjVolumes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Dayts = input.ReadFixed64();
            break;
          }
          case 18: {
            tickers_.AddEntriesFrom(input, _repeated_tickers_codec);
            break;
          }
          case 26: {
            Opens = input.ReadBytes();
            break;
          }
          case 34: {
            Highs = input.ReadBytes();
            break;
          }
          case 42: {
            Lows = input.ReadBytes();
            break;
          }
          case 50: {
            Closes = input.ReadBytes();
            break;
          }
          case 58: {
            Volumes = input.ReadBytes();
            break;
          }
          case 66: {
            ExDividends = input.ReadBytes();
            break;
          }
          case 74: {
            SplitRatios = input.ReadBytes();
            break;
          }
          case 82: {
            AdjOpens = input.ReadBytes();
            break;
          }
          case 90: {
            AdjHighs = input.ReadBytes();
            break;
          }
          case 98: {
            AdjLows = input.ReadBytes();
            break;
          }
          case 106: {
            AdjCloses = input.ReadBytes();
            break;
          }
          case 114: {
            AdjVolumes = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
